import telebot
from telebot import types
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot token (in a real application, store this securely)
API_KEY = '8179484671:AAGF2Wr4FVmmpIK9R3ejdXSum1Asdom_mLA'
bot = telebot.TeleBot(API_KEY)

# Resource URLs (organized for easy maintenance)
RESOURCES = {
    "pdf": {
        "UP Board": "https://boardexam.netlify.app/up_board/up_board_all_page",
        "CBSE Notes": "https://boardexam.netlify.app/cbsc_bord/cbsc_board_all_page",
        "Important Pages": "https://boardexam.netlify.app/all-link-site",
        "Graduation": "https://boardexam.netlify.app/graduation/graduation"
    },
    "tests": {
        "JEE MCQ": "https://boardexam.netlify.app/jee&neet/jee_test",
        "NEET Quiz": "https://boardexam.netlify.app/jee&neet/neet_test",
        "ITI Practice": "https://boardexam.netlify.app/iti/iti_page",
        "Merchant Navy": "https://boardexam.netlify.app/marchant_navi/navi.all%20topic.html"
    },
    "english": {
        "Grammar Guide": "https://boardexam.netlify.app/english_speacking.html/english-main",
        "Speaking Practice": "https://boardexam.netlify.app/english_speacking.html/english-main",
        "PDF Course": "https://boardexam.netlify.app/english_speacking.html/english-main"
    },
    "website": "https://boardexam.netlify.app/"
}

# Helper function to create keyboard markup
def create_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.KeyboardButton("ЁЯУЪ PDF Resources"),
        types.KeyboardButton("ЁЯзк Tests & Quizzes"),
        types.KeyboardButton("ЁЯЧгя╕П English Speaking"),
        types.KeyboardButton("ЁЯМР Visit Website"),
        types.KeyboardButton("тД╣я╕П About Bot"),
        types.KeyboardButton("ЁЯЖШ Help")
    ]
    markup.add(*buttons)
    return markup

# Start command handler
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        welcome_msg = (
            "ЁЯЩП рдирдорд╕реНрддреЗ {name}! рдореИрдВ Shashwat рдХрд╛ Educational Bot рд╣реВрдБред\n\n"
            "ЁЯУЪ рдореИрдВ рдЖрдкрдХреЛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕реБрд╡рд┐рдзрд╛рдПрдБ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБ:\n"
            "- рд╕рднреА рдХрдХреНрд╖рд╛рдУрдВ рдХреА ЁЯУШ рдкреБрд╕реНрддрдХреЗрдВ рдФрд░ ЁЯУД рдиреЛрдЯреНрд╕\n"
            "- рдкрд░реАрдХреНрд╖рд╛ ЁЯУС рдкреЗрдкрд░реНрд╕ рдФрд░ ЁЯзк рдкреНрд░реИрдХреНрдЯрд┐рд╕ рдЯреЗрд╕реНрдЯ\n"
            "- ЁЯЧгя╕П рдЕрдВрдЧреНрд░реЗрдЬреА рдмреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рд╢рд┐рдХреНрд╖рдг\n"
            "- рдФрд░ рднреА рдмрд╣реБрдд рдХреБрдЫ!\n\n"
            "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдореЗрдиреВ рд╕реЗ рдЕрдкрдирд╛ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ"
        ).format(name=message.from_user.first_name)
        
        bot.send_message(
            message.chat.id,
            welcome_msg,
            reply_markup=create_menu_keyboard()
        )
        logger.info(f"Sent welcome message to {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in send_welcome: {e}")
        bot.reply_to(message, "тЪая╕П рдХреБрдЫ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

# Help command handler
@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda msg: msg.text == "ЁЯЖШ Help")
def send_help(message):
    help_text = (
        "ЁЯЖШ рд╕рд╣рд╛рдпрддрд╛ рдХреЗрдВрджреНрд░:\n\n"
        "ЁЯУМ рдореИрдВ рдЖрдкрдХреЛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕реЗрд╡рд╛рдПрдБ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБ:\n"
        "- рд╢реИрдХреНрд╖рд┐рдХ рд╕рдВрд╕рд╛рдзрди рдбрд╛рдЙрдирд▓реЛрдб\n"
        "- рдСрдирд▓рд╛рдЗрди рдЯреЗрд╕реНрдЯ рдФрд░ рдХреНрд╡рд┐рдЬ\n"
        "- рдЕрдВрдЧреНрд░реЗрдЬреА рд╕реАрдЦрдиреЗ рдХреЗ рд╕рдВрд╕рд╛рдзрди\n\n"
        "ЁЯФ╣ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдореЗрдиреВ рдмрдЯрди рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ рдпрд╛ рдирд┐рдореНрди рдХрдорд╛рдВрдб рдЯрд╛рдЗрдк рдХрд░реЗрдВ:\n"
        "/start - рдмреЙрдЯ рдкреБрдирдГ рдЖрд░рдВрдн рдХрд░реЗрдВ\n"
        "/help - рд╕рд╣рд╛рдпрддрд╛ рджреЗрдЦреЗрдВ\n"
        "/about - рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА\n\n"
        "рд╕рдорд╕реНрдпрд╛ рд╣реЛрдиреЗ рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ: support@example.com"
    )
    bot.send_message(message.chat.id, help_text)

# About command handler
@bot.message_handler(commands=['about'])
@bot.message_handler(func=lambda msg: msg.text == "тД╣я╕П About Bot")
def send_about(message):
    about_text = (
        "тД╣я╕П рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ:\n\n"
        "ЁЯУЪ Shashwat Educational Bot\n"
        "рд╕рдВрд╕реНрдХрд░рдг: 2.0\n"
        "рдЕрдВрддрд┐рдо рдЕрдкрдбреЗрдЯ: 30 рдордИ 2024\n\n"
        "рдпрд╣ рдмреЙрдЯ рдЫрд╛рддреНрд░реЛрдВ рдХреЛ рдирд┐рдГрд╢реБрд▓реНрдХ рд╢реИрдХреНрд╖рд┐рдХ рд╕рдВрд╕рд╛рдзрди рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред\n\n"
        "рд╡рд┐рдХрд╕рд┐рддрдХрд░реНрддрд╛: Shashwat\n"
        "рд╕рдВрдкрд░реНрдХ: contact@example.com"
    )
    bot.send_message(message.chat.id, about_text)

# PDF Resources handler
@bot.message_handler(func=lambda msg: msg.text == "ЁЯУЪ PDF Resources")
def send_pdf_resources(message):
    try:
        response = "ЁЯУЪ PDF рд╕рдВрд╕рд╛рдзрди:\n\n"
        for name, url in RESOURCES["pdf"].items():
            response += f"ЁЯФ╣ {name}: {url}\n"
        
        response += "\nтмЖя╕П рдЙрдкрд░реЛрдХреНрдд рд▓рд┐рдВрдХ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдХреЗ рд╕рдВрд╕рд╛рдзрди рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВред"
        
        # Add inline buttons for quick access
        markup = types.InlineKeyboardMarkup()
        for name, url in RESOURCES["pdf"].items():
            markup.add(types.InlineKeyboardButton(text=name, url=url))
        
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=markup,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in send_pdf_resources: {e}")
        bot.reply_to(message, "тЪая╕П PDF рд╕рдВрд╕рд╛рдзрди рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

# Tests handler
@bot.message_handler(func=lambda msg: msg.text == "ЁЯзк Tests & Quizzes")
def send_tests(message):
    try:
        response = "ЁЯзк рдкрд░реАрдХреНрд╖рдг рдФрд░ рдХреНрд╡рд┐рдЬрд╝:\n\n"
        for name, url in RESOURCES["tests"].items():
            response += f"тЬЕ {name}: {url}\n"
        
        # Add inline buttons
        markup = types.InlineKeyboardMarkup()
        for name, url in RESOURCES["tests"].items():
            markup.add(types.InlineKeyboardButton(text=name, url=url))
        
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=markup,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in send_tests: {e}")
        bot.reply_to(message, "тЪая╕П рдЯреЗрд╕реНрдЯ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

# English Speaking handler
@bot.message_handler(func=lambda msg: msg.text == "ЁЯЧгя╕П English Speaking")
def send_english_resources(message):
    try:
        response = "ЁЯЧгя╕П рдЕрдВрдЧреНрд░реЗрдЬреА рд╕реАрдЦрдиреЗ рдХреЗ рд╕рдВрд╕рд╛рдзрди:\n\n"
        for name, url in RESOURCES["english"].items():
            response += f"ЁЯУМ {name}: {url}\n"
        
        # Add inline buttons
        markup = types.InlineKeyboardMarkup()
        for name, url in RESOURCES["english"].items():
            markup.add(types.InlineKeyboardButton(text=name, url=url))
        
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=markup,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in send_english_resources: {e}")
        bot.reply_to(message, "тЪая╕П рдЕрдВрдЧреНрд░реЗрдЬреА рд╕рдВрд╕рд╛рдзрди рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред")

# Website handler
@bot.message_handler(func=lambda msg: msg.text == "ЁЯМР Visit Website")
def send_website(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ЁЯМР рд╡реЗрдмрд╕рд╛рдЗрдЯ рдЦреЛрд▓реЗрдВ", url=RESOURCES["website"]))
    bot.send_message(
        message.chat.id,
        "рд╣рдорд╛рд░реА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдПрдБ:",
        reply_markup=markup
    )

# Default handler for unknown messages
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.reply_to(
        message,
        "тЭМ рдореИрдВ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдирд╣реАрдВ рд╕рдордЭ рдкрд╛рдпрд╛ред\n\n"
        "рдХреГрдкрдпрд╛ рдореЗрдиреВ рд╕реЗ рдХреЛрдИ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ рдпрд╛ /help рдЯрд╛рдЗрдк рдХрд░реЗрдВред",
        reply_markup=create_menu_keyboard()
    )

# Error handler
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    try:
        bot.answer_callback_query(call.id, "Processing your request...")
    except Exception as e:
        logger.error(f"Error in callback: {e}")

# Start the bot
if __name__ == "__main__":
    logger.info("ЁЯдЦ рдмреЙрдЯ рд╕рдХреНрд░рд┐рдп рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
